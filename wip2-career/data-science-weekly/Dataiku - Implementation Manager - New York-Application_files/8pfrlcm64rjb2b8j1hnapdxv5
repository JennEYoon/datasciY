/* Auto generated, hash = 6s380wnyv3lkhvmw4o0cblul1 */
/*global LI*/
'use strict';

require(['jquery'], function ($) {

  /**
    Before the fix for fixed width/height, our widget implementation was such that it would change width dynamically to fit in "Apply with LinkedIn" text inside this. This means if width of button can be 170px for English while 190px for Russian. However, our ATS partners didn't anticipate the dynamic width based on i18n text and reserved width equivalent to english text for the widget. This resulted in broken experience for few non-english users.
     After this fix, our widget implementation will lock down on width/height for small, medium and large buttons.
       - For small button, width = 175px and height = 72px;
       - For medium button, width = 175px and height = 80px;
       - For large button, width = 230px and height = 88px;
    As a result of fixed width/height for different sizes, we needed to decrease font-size of text inside the button or wrap text for locales which didn't fit in the width specified.
    */
  var AWLI_WIDTH = {
    medium: 175,
    large: 175,
    xlarge: 230
  },
      AWLI_HEIGHT = {
    medium: 72,
    large: 80,
    xlarge: 88
  };
  LI.AwliWidget = {
    init: function init() {
      $.ajaxSetup({
        headers: { 'Csrf-Token': play.getPageContextValue('csrfToken') }
      });

      // contains the parameters necessary to continue the processing of the requests to the widget
      this.awliData = play.getEmbeddedContent('awli-data');
      this.awliControl = play.getEmbeddedContent('awli-control');
      this.awliError = play.getEmbeddedContent('awli-error');
      this.awliConfirmText = this.awliControl.confirmText;
      this.awliConfirmTextEnabled = this.awliControl.showConfirmText;
      this.fetchProfileData = this.awliControl && this.awliControl.fetchProfileData; // do we fetch profile data for current widget config
      this.trackConversion = this.awliControl && this.awliControl.trackConversion; // do we track conversion
      this.shouldCallbackOnDataFetch = this.awliControl && this.awliControl.shouldCallbackOnDataFetch; // do we call on data fetched callback?
      this.shouldCallbackForDefaultButton = this.awliControl && this.awliControl.shouldCallbackForDefaultButton; // do we callback to show default button
      this.showButton = this.awliControl && this.awliControl.showButton; // do we show button (if user is logged in) for current widget config
      this.loggedInButtonIdSuffix = this.awliControl && this.awliControl.buttonIdSuffix; // the suffix of the button
      this.loggedInButtonSelector = "#awli-button-member-" + this.loggedInButtonIdSuffix;
      this.loggedOutUserButton = "#awli-button-member-logged-out";
      this.buttonIdWrapper = ".awli-wrapper";
      this.loggedInWrapper = ".awli-apply-button";
      this.loggedOutWrapper = ".awli-signin-button";

      if (this.awliError && !$.isEmptyObject(this.awliError)) {
        var errorMsg = this._convertErrorMapToString(this.awliError);
        throw Error("Error trying to initialize the widget! Error is :" + errorMsg);
      }

      if (this.awliData.mode === 'BUTTON' || this.awliData.mode === 'BUTTON_DATA') {
        if (this.showButton) {
          LI.AwliWidget.bindEventListeners();
          this._resizeIframe();
        }
        // if allowSignInMode enabled, need to bind listeners for sign in flow.
        else if (this.awliControl.allowSignInMode) {
            LI.AwliWidget.bindEventListenersForSignInFlow();
            this._resizeIframe();
          }
          // if member is not signed in, and allowSignInMode is false, then we should call the defaultButtonCallback
          else {
              this._handleGuestView();
            }
      }
      // if need to fetch profile data on widget loads, call _handleFetchProfileData
      else if (this.fetchProfileData) {
          this._handleFetchProfileData(this.shouldCallbackOnDataFetch);
        }
        // if none of the above, then handle conversion tracking
        else if (this.trackConversion) {
            this._handleConversionTracking();
          }
          // if non of the above, should be guest view
          else {
              this._handleGuestView();
            }
    },

    bindEventListeners: function bindEventListeners() {
      $(this.loggedInButtonSelector).on('click', this._onApplyWithLinkedInClicked.bind(this));
    },

    /**
     * If sign if flow is enabled, need to bind the actions for the sign in button also.
     */
    bindEventListenersForSignInFlow: function bindEventListenersForSignInFlow() {
      $(this.loggedInButtonSelector).on('click', this._onApplyWithLinkedInClicked.bind(this));
      $(this.loggedOutUserButton).on('click', this._onApplyWithLinkedInLoggedOutClicked.bind(this));
    },

    /**
     * If sign-in with LI button is clicked, we open a new window popup,
     * and ask users to login. Once login is successful, connect framework redirects to
     * /xdrpc.html page. Hence, we check if user closed the window popup or if user was redirected to
     * /xdrpc.html page. On window close, we send a signal to ATS page to reload the iframe that will
     * now display Apply with LinkedIn button.
     *
     * @private
     */
    _onApplyWithLinkedInLoggedOutClicked: function _onApplyWithLinkedInLoggedOutClicked() {
      var loginWindow = window.open('/uas/connect/user-signin?trk=applyWithLinkedin', '_blank', 'height=540,width=450,scrollbars=yes'),
          poll = setInterval((function () {
        var pathName;

        try {
          pathName = loginWindow.location.pathname;
        } catch (e) {}

        var loginSuccess = pathName === '/uas/js/xdrpc.html';
        if (loginWindow.closed || loginSuccess) {
          clearInterval(poll);
          loginWindow.close();

          if (loginSuccess && document.cookie.indexOf('liap=true') === -1) {
            // this means browser has disabled tracking cookies
            // so reloading iframe won't work
            $('.awli-apply-button').show();
            $('.awli-signin-button').hide();
          } else {
            // track member clicking 'Signing with LinkedIn' button
            this._sendSuccessResponse('reload', { memberSignedIn: true, companyApplyUrl: this.awliData.originDomain }, this.awliData.originDomain);
          }
        }
      }).bind(this), 200);
    },

    /**
     * If AWLI button is clicked, check if we need to show confirm dialog for security reasons
     * Refer: https://jira01.corp.linkedin.com:8443/browse/PWN-15250
     *
     * @private
     */
    _onApplyWithLinkedInClicked: function _onApplyWithLinkedInClicked() {
      var anchorTag, hostname;

      if (this.awliConfirmTextEnabled) {
        anchorTag = document.createElement('a');
        anchorTag.href = this.awliData.originDomain;

        hostname = anchorTag.protocol + '//' + anchorTag.hostname;
        if (window.confirm(this.awliConfirmText + hostname)) {
          this._handleApplyWithLinkedInClicked();
        }
      } else {
        this._handleApplyWithLinkedInClicked();
      }
    },

    /**
     * If AWLI button is clicked, we always need to create apply starters,
     *
     * @private
     */
    _handleApplyWithLinkedInClicked: function _handleApplyWithLinkedInClicked(popupMode) {
      var blockedCookie = document.cookie.indexOf('liap=true') === -1;

      if (blockedCookie && !popupMode) {
        this._applyWithLinkedInProxyPopup();
      } else if (this.awliData.mode && this.awliData.mode === 'BUTTON') {
        return this._handleButtonClick().then((function (data) {
          return popupMode ? data : this._handleSuccess(data);
        }).bind(this));
      } else if (this.awliData.mode && this.awliData.mode == 'BUTTON_DATA') {
        return this._handleButtonClickThenFetchProfile().then((function (data) {
          return popupMode ? data : this._handleSuccess(data);
        }).bind(this));
      } else {
        throw Error("Unsupported mode called while the button is clicked.");
      }
    },

    _applyWithLinkedInProxyPopup: function _applyWithLinkedInProxyPopup() {
      // this means browser has disabled tracking cookies
      // so we open a popup to get the full LinkedIn cookie environment
      var proxy = window.open(location.href + '&popupMode=true', '_blank', 'width=200,height=100');
      proxy.onload = (function () {
        proxy.LI.AwliWidget._handleApplyWithLinkedInClicked(true).then(this._handleSuccess.bind(this)).always(function () {
          proxy.close();
        });
      }).bind(this);
    },

    _handleSuccess: function _handleSuccess(data) {
      if (this.awliData.mode === 'BUTTON') {
        this._handleButtonClickSuccess(data);
      } else if (this.awliData.mode == 'BUTTON_DATA') {
        this._handleFetchProfileSuccess(data, true);
      }
    },

    /**
     * If the Guest button is clicked, do nothing extra, just call the callback provided by the partner.
     *
     * @private
     */
    _handleGuestView: function _handleGuestView() {
      if (this.shouldCallbackForDefaultButton) {
        this._sendSuccessResponse('defaultButton', {}, null, this.awliData.originDomain);
      }
    },

    _handleButtonClick: function _handleButtonClick() {
      var userConsentPromise, applyStarterPromise;
      // start these two ajax calls in parallel
      userConsentPromise = this._createUserConsents();
      applyStarterPromise = this._createApplyStarters();
      return userConsentPromise.then((function (data) {
        // no matter _createApplyStarters is successful or not, we proceed to next as createUserConsents() is successful
        return applyStarterPromise.then(function (data) {
          return data;
        }, function (data) {
          return $.Deferred().resolve(data);
        });
      }).bind(this));
    },

    /**
     * This method is for BUTTON_DATA mode. When button is clicked, we need to make sure fetch profile call is made
     * after the create apply starter call finishes. Becase we rely on the apply starter records to make sure the user
     * has consent to sharing their profile.
     *
     * @private
     */
    _handleButtonClickThenFetchProfile: function _handleButtonClickThenFetchProfile() {
      return this._handleButtonClick().then(this._getProfileInfo.bind(this));
    },

    _getProfileInfo: function _getProfileInfo() {
      var url = play.url({ alias: 'controllers.api.ApplyWithLinkedinWidgetController.getProfileInfo' }),
          ajaxParams = $.extend(true, {}, this.awliData);
      delete ajaxParams.originDomain;
      if (!ajaxParams.companyToken) {
        delete ajaxParams.companyToken;
      }
      return $.ajax({
        url: url,
        data: ajaxParams,
        type: 'GET'
      });
    },

    _handleFetchProfileData: function _handleFetchProfileData(invokeCallback) {
      this._getProfileInfo().then((function (data) {
        this._handleFetchProfileSuccess(data, invokeCallback);
      }).bind(this));
    },

    _handleConversionTracking: function _handleConversionTracking() {
      var url = play.url({ alias: 'controllers.api.ApplyWithLinkedinWidgetController.trackConversion' }),
          ajaxParams = $.extend(true, {}, this.awliData);
      delete ajaxParams.originDomain;
      $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(ajaxParams),
        contentType: 'application/json'
      });
    },

    /**
     * When the interaction with the widget is done, we need to make a callback (post a message) to the partner's page.
     * This method is used when we want the partners to handle the response from our widget.
     *
     * @param operation  A string containing the type of operations we want to handle.
     * @param data       The actual data passed back to the client page, such as the profile information
     * @param signature  An "HMACSHA256" signature of the escaped unicode version of the data prefixed by"hmacsha256=".
     *                   It is encoded with the secretkey associated with the api key of the partner. A partner can verify
     *                   the authenticity of the data by encoding the data with their secret key on their end.
     * @param origin     The domain (e.g. https;//www.jobvite.com) of the parent page hosting our widget.
     * @private
     */
    _sendSuccessResponse: function _sendSuccessResponse(operation, data, signature, origin) {
      var targetOrigin;
      if (origin) {
        targetOrigin = origin;
      } else {
        targetOrigin = this.awliData.originDomain;
      }
      window.parent.postMessage(JSON.stringify({
        operation: operation,
        data: data,
        signature: signature
      }), targetOrigin);
    },

    _convertErrorMapToString: function _convertErrorMapToString(errors) {
      var concatError = "";
      for (var i in errors) {
        concatError += i + ": " + errors[i] + " \n";
      }
      return concatError;
    },

    _handleButtonClickSuccess: function _handleButtonClickSuccess(data) {
      this._sendSuccessResponse('buttonClick', data, null, this.awliData.originDomain);
    },
    _handleFetchProfileSuccess: function _handleFetchProfileSuccess(data, invokeCallback) {
      if (invokeCallback && data && data.result && data.result.profileData && data.result.signature) {
        this._sendSuccessResponse('dataFetch', data.result.profileData, data.result.signature, this.awliData.originDomain);
      }
    },

    /**
     * When the render of button is done, we need to make a callback (post a message) to the partner's page.
     * This method is used when we want resize iframe that includes apply button.
     *
     * @private
     */
    _resizeIframe: function _resizeIframe() {
      var data = {
        width: AWLI_WIDTH[this.awliControl.size] || AWLI_WIDTH["medium"],
        height: AWLI_HEIGHT[this.awliControl.size] || AWLI_HEIGHT["medium"]
      };

      if (!this.showButton && !this.awliControl.allowSignInMode) {
        return;
      }

      $(this.loggedInButtonSelector).css('minWidth', data.width);
      $(this.loggedOutUserButton).css('minWidth', data.width);
      this._sendSuccessResponse('resizeIframe', data, null, this.awliData.originDomain);
    },

    /**
     * Create an record of apply starters entry when the user clicks on apply with LinkedIn.
     * Instead of handling the ajax response, return the deferred promise.
     *
     * @private
     */
    _createApplyStarters: function _createApplyStarters() {
      var url = play.url({ alias: 'controllers.api.ApplyWithLinkedinWidgetController.createApplyStarter' }),

      // track the full url of the third party job page
      data = $.extend(true, { companyApplyUrl: this.awliData.originDomain }, this.awliData),
          ajaxCallPromise;
      delete data.originDomain;
      ajaxCallPromise = $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json'
      });
      return ajaxCallPromise;
    },

    _createUserConsents: function _createUserConsents() {
      var url = play.url({ alias: 'controllers.api.ApplyWithLinkedinWidgetController.createUserConsent' }),

      // track the full url of the third party job page
      data = $.extend(true, { companyApplyUrl: this.awliData.originDomain }, this.awliData),
          ajaxCallPromise;
      delete data.originDomain;

      ajaxCallPromise = $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json'
      });
      return ajaxCallPromise;
    }
  };
  $(document).ready(function () {
    LI.AwliWidget.init();
  });
});
